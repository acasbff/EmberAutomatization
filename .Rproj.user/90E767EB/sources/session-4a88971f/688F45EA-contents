library(tidyverse)
library(readxl)
library(lubridate)
library(forecast)

setwd('/Users/acas/Dropbox/BFF/projects/QuaterlyReports/Ember_API_python/')

# download.file('https://ember-climate.org/app/uploads/2022/07/monthly_full_release_long_format-4.csv', paste0('monthly_full_release_long_format-4_', 
#                      str_remove_all(Sys.Date(), "-"), ".csv"), mode = "wb")

iso_codes_df <- read.delim('/Users/acas/Dropbox/BFF/projects/BFFcountries.txt')
iso_codes <- iso_codes_df$Iso3

notEU <-  unique(dfdown1$Area)[!unique(dfdown1$Area) %in% unique(finalData$Area)][-c(2,3)]
notEU <- pull(filter(iso_codes_df, !region %in% 'EU'), Iso3)[-1] ### Ember doesn't have Albania data

EmberEurope <- filter(dfdown1, `Ember region` %in% 'Europe') %>% pull(`Country code`) %>% unique()

dfdown1 <- read_csv(paste0('monthly_full_release_long_format-4_', 
                           str_remove_all('20240826', "-"), ".csv"), show_col_types = FALSE) %>% ##Sys.Date()
  filter(Date >= "2019-01-01",
       #  Area %in% c('EU','Europe') | EU == 1 | `Country code` %in% iso_codes, ## get all the BFF countries
         !Category %in% c('Power sector emissions','Electricity prices'),
         !Subcategory %in% 'Aggregate fuel',
         Unit %in% 'TWh') %>% 
  select(Area, `Country code`, Date, EU, Variable, Value)

# Aggregate the country-level Demand data for each month for EU countries
demand_EU_Estimated <- dfdown1 %>%
  filter(Variable == "Demand", EU == 1) %>%
  group_by(Date) %>%
  summarize(EU_Estimated = sum(Value, na.rm = TRUE), .groups = 'drop')

# demand_Europe_Estimated <- dfdown1 %>%
#   filter(Variable == "Demand", `Ember region` == 'Europe') %>%
#   mutate(countrySet = ifelse(`Country code` %in% notEU, 'notEU', 'EU')) %>% 
#   group_by(Date, countrySet) %>%
#   summarize(Europe_Estimated = sum(Value, na.rm = TRUE), .groups = 'drop') %>% 
#   pivot_wider(values_from = Europe_Estimated, names_from = countrySet)

# Extract the EU Demand data for the same months
demand_EU_Regional <- dfdown1 %>%
  filter(Area == "EU", Variable == "Demand") %>%
  select(Date, EU_Regional = Value)

# demand_Europe_Regional <- dfdown1 %>%
#   filter(Area == "Europe", Variable == "Demand") %>%
#   select(Date, Europe_Regional = Value)

# demandEurope <- left_join(demand_Europe_Estimated, demand_Europe_Regional) %>% 
#   mutate(diff = Europe_Regional - Europe_Estimated)
# 
# demandEurope2 <- left_join(demandEurope, demand_Europe_Estimated) %>%  pivot_longer(cols = diff:notEU)
# ggplot(demandEurope2, aes(x = Date, y = value, fill = name)) + geom_col()

# Create a complete date sequence from min to max months used for all countries
all_dates <- seq(from = min(dfdown1$Date), to = max(dfdown1$Date), by = "month")

# Generate a complete dataset with all Areas, all Dates and all variables
complete_data <- expand_grid(Area = unique(pull(filter(dfdown1, EU == 1), Area)), 
                             Date = all_dates, 
                             Variable = unique(dfdown1$Variable))

# Filter to just demand data and left join with the filtered to demand to identify missing entries
demand_complete <- complete_data %>%
  filter(Variable %in% 'Demand') %>% 
  left_join(filter(dfdown1, Variable == "Demand", EU == 1), 
            by = c("Area", "Date", "Variable"))  %>% # Mark rows as missing where the Value is NA
  mutate(missing = ifelse(is.na(Value), TRUE, FALSE))


# Function to fit ARIMA and predict missing data - needs to include the rows with the missing data to predict
predict_missing_data <- function(data) {
  data <- data %>% 
    mutate(predicted = ifelse(is.na(Value), TRUE, FALSE)) # Create a new column to flag predicted values
  
  if(any(is.na(data$Value))) {
    # Fit ARIMA model to non-missing data
    fit <- auto.arima(data$Value, seasonal = TRUE)
    
    # Predict missing values
    missing_index <- which(is.na(data$Value))
    data$Value[missing_index] <- forecast(fit, h = length(missing_index))$mean
  }
  
  return(data)
}

# Apply the function to each country's Demand data
predicted_data <- demand_complete %>%
  group_by(Area) %>%
  nest() %>%
  mutate(data = map(data, predict_missing_data)) %>%
  unnest(data) %>% 
  rename(pred_Value = Value)

# Aggregate predicted data at the EU level
predicted_EU_demand <- predicted_data %>%
  group_by(Date) %>%
  summarize(predicted_EU = sum(pred_Value, na.rm = TRUE), .groups = 'drop')

# Compare predicted EU data with EU Regional data
compEUpred <- predicted_EU_demand %>%
  left_join(demand_EU_Regional, by = "Date") %>%
  mutate(adjustment_factor = EU_Regional / predicted_EU)

# Apply the EU-wide adjustment to country-level predictions
predAdjusted_data <- predicted_data %>%
  left_join(select(compEUpred, Date, adjustment_factor), by = "Date") %>%
  mutate(PredAdjusted_Value = pred_Value * adjustment_factor) %>%
  select(-adjustment_factor)

complete_data2 <- left_join(complete_data, dfdown1) 
# Predict Net Imports using the ARIMA function
net_imports_data <- complete_data2 %>% 
  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), 
         Variable == "Net Imports")  %>%
  group_by(Area) %>%
  nest() %>%
  mutate(data = map(data, predict_missing_data)) %>%
  unnest(data) %>% 
  rename(pred_Imports = Value)

# Predict Total Generation using the defined ARIMA function
total_generation_data <- complete_data2 %>% 
  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), 
         Variable == "Total Generation")  %>%
  group_by(Area) %>%
  nest() %>%
  mutate(data = map(data, predict_missing_data)) %>%
  unnest(data) %>% 
  rename(pred_Total = Value)

# Get the PredAdjusted_Value for the missing months
pred_missing_ImpTotal <- filter(predAdjusted_data, predicted == TRUE) %>%  
  left_join(select(net_imports_data, Area, Date, pred_Imports)) %>% 
  left_join(select(total_generation_data, Area, Date, pred_Total)) %>% 
  rename(PredAdjusted_Demand = PredAdjusted_Value) %>% 
  mutate(adjusted_Total = PredAdjusted_Demand - pred_Imports)

# Predict per fuel and adjust based on adjusted total
fuel_types <- filter(complete_data2, !Variable %in% 
                       c("Demand","Net Imports", "Total Generation")) %>% 
  pull(Variable) %>% 
  unique()

missingCountries_fuel_data <- complete_data2 %>% 
  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), 
         Variable %in% fuel_types)  

# Loop through each country with missing data
final_fuel_predictions <- list()
for (country in unique(pred_missing_ImpTotal$Area)) {
  
  missingDates <- filter(predicted_data, predicted == TRUE, Area == country) %>% 
    pull(Date)
  
  # Filter for the specific country
  country_data <- missingCountries_fuel_data %>% 
    filter(Area == country) %>%
    ## deal with the fuels that are missing in historical data, consider them zeros. If not doing this it will predict values for month for which there is data
    mutate(Value = case_when(!Date %in% missingDates & is.na(Value) ~ 0,
                             TRUE~Value)) 
  
  # Initialize an empty list to store fuel predictions for this country
  country_fuel_predictions <- list()
  ## Loop through each fuel type
  for (fuel in fuel_types) {
    
    # Predict fuel contribution using the defined ARIMA function
    fuel_data <- country_data %>% 
      filter(Variable == fuel)
    
    predicted_fuel <- predict_missing_data(fuel_data) %>% 
      filter(predicted == TRUE)
    
    # Store the fuel predictions
    country_fuel_predictions[[fuel]] <- predicted_fuel
  }
  
  # Combine all the fuel predictions for this country
  country_fuels_df <- bind_rows(country_fuel_predictions)
  
  # Check if the sum of predicted fuels matches the adjusted Total Generation
  sum_predicted_fuels <- country_fuels_df %>% 
    group_by(Area, Date) %>%
    summarize(sum_fuels = sum(Value, na.rm = TRUE)) %>% 
    left_join(select(pred_missing_ImpTotal, Area, Date, adjusted_Total)) %>%
    mutate(adjustment_factor = adjusted_Total / sum_fuels)
  
  # Store the adjusted fuel predictions for each country
  final_fuel_predictions[[country]] <- country_fuels_df %>%
    left_join(sum_predicted_fuels) %>%
    mutate(adjusted_valueFuel = Value * adjustment_factor) %>%
    select(Area, Date, Variable, Value, adjusted_valueFuel)
}

# Combine all missing countries' fuel predictions 
missing_fuel_predictions_df <- bind_rows(final_fuel_predictions)

missingFinal <- select(pred_missing_ImpTotal, -Variable, -`Country code`, -missing, -EU) %>% 
  rename(`Net Imports` = pred_Imports, `Total Generation` = pred_Total,
         Demand = pred_Value, adjusted_Demand = PredAdjusted_Demand ) %>% 
  left_join(missing_fuel_predictions_df)

# Create a DataFrame for fuels without the missing data
nonmissing_fuel <- complete_data2 %>%
  filter(Variable %in% fuel_types) %>%
  select(Area, Date, Variable, Value) %>% 
  replace_na(list(Value = 0)) ### assume missing fuels are just 0s

# Left Join Net Imports, Total Generation, and Demand per fuel/country/date and get adjusted Total for non missing
fuel_adjustment_data <- complete_data2 %>%
  filter(!Variable %in% fuel_types) %>%
  select(Area, Date, Variable, Value) %>% 
  pivot_wider(names_from = Variable, values_from = Value) %>% 
  left_join(nonmissing_fuel) %>% 
  left_join(select(predAdjusted_data, Area, Date, predicted, PredAdjusted_Value)) %>% 
  rename(PredAdjusted_Demand = PredAdjusted_Value) %>%
  mutate(adjusted_Total = PredAdjusted_Demand - `Net Imports`) %>%
  filter(predicted == FALSE)

# Apply Adjustment Factor to Fuels for non missing
adjusted_fuel_data <- fuel_adjustment_data  %>% 
  group_by(Area, Date) %>%
  mutate(sum_fuels = sum(Value, na.rm = TRUE),
         adjustment_factor = adjusted_Total / sum_fuels,
         adjusted_valueFuel = Value * adjustment_factor) %>%
  select(Area, Date, Variable, adjusted_valueFuel)

# clean data for both missing and non missing as well demand/total/net imports and adjusted
finalData <- left_join(fuel_adjustment_data, adjusted_fuel_data) %>% 
  rename(adjusted_Demand = PredAdjusted_Demand) %>% 
  bind_rows(missingFinal) %>% 
  relocate(c(predicted,`Net Imports`, `Total Generation`, 
             adjusted_Total, Demand, adjusted_Demand), .before = Variable) %>% 
  rename(Fuel = Variable, Fuel_value = Value, AdjustedFuel_value = adjusted_valueFuel)




####

demand_Europe_Regional <- dfdown1 %>%
  filter(Area == "Europe", Variable %in% c("Total Generation", "Net Imports")) %>%
  select(Date, Variable, Europe_Regional = Value)

demand_Europe_Estimated <- dfdown1 %>%
  filter(Variable %in% c("Total Generation", "Net Imports"), `Ember region` == 'Europe') %>%
  mutate(countrySet = ifelse(`Country code` %in% notEU, 'notEU', 'EU')) %>%
  group_by(Date, countrySet, Variable) %>%
  summarize(value = sum(Value, na.rm = TRUE), .groups = 'drop') %>%
  pivot_wider(values_from = value, names_from = countrySet) %>% 
  left_join(demand_Europe_Regional)

# Europe Regional demand data is only based on Total Generation


# demand_Europe_Regional <- dfdown1 %>%
#   filter(Area == "Europe", Variable == "Demand") %>%
#   select(Date, Europe_Regional = Value)

# demandEurope <- left_join(demand_Europe_Estimated, demand_Europe_Regional) %>% 
#   mutate(diff = Europe_Regional - Europe_Estimated)
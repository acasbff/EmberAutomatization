[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "",
    "text": "Ember methodology related to projected monthly data\nIn several cases monthly data is reported on a lagged basis, or data may not be available. In these cases, incomplete months are projected based on both seasonal and interannual trends. We aim to produce sensible figures (i.e. roughly what would be expected by eye), rather than trying to accurately account for e.g. unusual weather conditions in a given month. Projected data is not released for individual countries on a monthly level, but can play a small role in some monthly regional and country-level annual figures.\nThe approach uses a series of ARIMA models organised as follows:\nNotes on Ember data\nSteps for an approach to predict missing data and adjust fuel and country data to add up to Regional EU Ember:"
  },
  {
    "objectID": "index.html#check-overview-of-temporal-data",
    "href": "index.html#check-overview-of-temporal-data",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Check overview of temporal data",
    "text": "Check overview of temporal data\n\n\nCode\n### Check all the \"areas\" in the data\nunique(dfdown$Area)\n\n\n [1] \"Austria\"            \"Belgium\"            \"Bosnia Herzegovina\"\n [4] \"Bulgaria\"           \"Croatia\"            \"Cyprus\"            \n [7] \"Czechia\"            \"Denmark\"            \"Estonia\"           \n[10] \"EU\"                 \"Europe\"             \"Finland\"           \n[13] \"France\"             \"Germany\"            \"Greece\"            \n[16] \"Hungary\"            \"Ireland\"            \"Italy\"             \n[19] \"Kosovo\"             \"Latvia\"             \"Lithuania\"         \n[22] \"Luxembourg\"         \"Malta\"              \"Moldova\"           \n[25] \"Montenegro\"         \"Netherlands\"        \"North Macedonia\"   \n[28] \"Norway\"             \"Poland\"             \"Portugal\"          \n[31] \"Romania\"            \"Serbia\"             \"Slovakia\"          \n[34] \"Slovenia\"           \"Spain\"              \"Sweden\"            \n[37] \"Switzerland\"        \"Turkey\"             \"Ukraine\"           \n[40] \"United Kingdom\"    \n\n\nCode\n### Check all the \"variables\" in the data\nunique(dfdown$Variable)\n\n\n [1] \"Demand\"           \"Bioenergy\"        \"Coal\"             \"Gas\"             \n [5] \"Hydro\"            \"Other Fossil\"     \"Other Renewables\" \"Solar\"           \n [9] \"Wind\"             \"Total Generation\" \"Net Imports\"      \"Nuclear\"         \n\n\nCode\n### Get how many months of information per area with min and max months\nmonthsOverview &lt;- dfdown %&gt;%  \n  filter(Variable %in% 'Demand') %&gt;% \n  group_by(Area) %&gt;% \n  reframe(EU = unique(EU),\n          \"Total Months\" = n() , \n          \"Minimum Month\" = min(Date, na.rm = TRUE), \n          \"Maximum Month\" = max(Date, na.rm = TRUE))  \n\nmonthsOverview  %&gt;% \n  datatable(\n    filter = \"top\",  \n    rownames = FALSE, \n    extensions = 'Scroller', \n    options = list(\n      autoWidth = TRUE,\n      deferRender = TRUE,\n      scrollY = 300,\n      scrollX = TRUE,    # Enable horizontal scrolling\n      scroller = TRUE, \n      orderMulti = TRUE,  # Enable multiple column sorting\n      initComplete = JS(\n        \"function(settings, json) {\",\n        \"$('.dataTables_wrapper').css('font-size', '12px');\",  # Adjust font size here\n        \"}\"\n      )\n    ),\n    caption = htmltools::tags$caption(\n      style = 'caption-side: bottom; text-align: left; font-size: 12px; color: #777; font-style: italic;',\n      'Note: Hold Shift to sort by multiple columns'\n    )\n  )"
  },
  {
    "objectID": "index.html#compare-regional-with-estimated-demand-from-country-data",
    "href": "index.html#compare-regional-with-estimated-demand-from-country-data",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Compare regional with estimated demand from country data",
    "text": "Compare regional with estimated demand from country data\nRegional Europe and regional EU (Area column), estimated Europe (sum of countries from Ember region column), estimated EU (sum of countries from EU column) and BFF Europe (sum of BFF countries)\n\n\nCode\ndemandEUEuropeRegional &lt;- filter(dfdown, Area %in% c('EU', 'Europe'), \n                         Variable %in% 'Demand') %&gt;% \n  mutate(set = ifelse(Area == 'EU', \n                      'EU - regional', \n                      'Europe - regional'))\n\n## 39 countries\ndemandEuropeEstimated &lt;- filter(dfdown0, `Ember region` == 'Europe', \n                         Variable %in% 'Demand', \n                         ) %&gt;% \n  group_by(Date) %&gt;% \n  summarize(set = 'Europe - estimated',\n            Value = sum(Value, na.rm = TRUE))\n\ndemandEUEstimated &lt;- filter(dfdown0, EU == 1, \n                         Variable %in% 'Demand') %&gt;% \n  group_by(Date) %&gt;% \n  summarize(set = 'EU - estimated',\n            Value = sum(Value, na.rm = TRUE))\n\ndemandBFF &lt;- filter(dfdown, !Area %in% c('EU', 'Europe'), \n                         Variable %in% 'Demand') %&gt;% \n  group_by(Date) %&gt;% \n  summarize(set = 'BFF Europe - estimated',\n            Value = sum(Value, na.rm = TRUE))\n\ndemandComp &lt;- bind_rows(demandEUEstimated, demandEuropeEstimated, demandEUEuropeRegional, demandBFF) %&gt;% \n  mutate(set = factor(set, levels=c('Europe - regional', \n                                    'Europe - estimated', \n                                    'BFF Europe - estimated',\n                                    'EU - regional',\n                                    'EU - estimated'))) \n\nq1 &lt;- demandComp %&gt;%\n  ggplot(aes(x = Date, y = Value, color = set)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(y = 'Demand TWh since 2015', x = NULL, colour = NULL) \n\nq2 &lt;- filter(demandComp, Date &gt;= \"2024-01-01\") %&gt;%\n  ggplot(aes(x = Date, y = Value, color = set)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(y = 'Demand TWh in 2024', x = NULL, colour = NULL) \n\n(q1 + q2 & theme(legend.position = \"bottom\")) + \n  plot_layout(guides = \"collect\", widths = c(2, 1))  \n\n\n\n\n\nCode\ndfdown1 &lt;- dfdown %&gt;%\n  filter(Date &gt;= \"2017-01-01\")\n\n\nBetter to use EU demand estimates to bound the model and only from 2017 onwards. Shouldn’t use Regional Europe to adjust non-EU countries since this includes Russia, although could remove the Russia data from Europe regional and make the adjustment, but given there is no net imports for Regional Europe, it might make more sense to use non-EU countries data without adjustment."
  },
  {
    "objectID": "index.html#identify-the-months-and-countries-missing-data-for-the-last-12-months",
    "href": "index.html#identify-the-months-and-countries-missing-data-for-the-last-12-months",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Identify the months and countries missing data for the last 12 months",
    "text": "Identify the months and countries missing data for the last 12 months\n\n\nCode\nmissing_data &lt;- dfdown1 %&gt;%\n  group_by(Area, Date, Variable) %&gt;%\n  summarize(EU = unique(EU),\n            missing = any(is.na(Value)), .groups = 'drop') \n\nlength(unique(missing_data$Date)) #months with available data to project since 2017\n\n\n[1] 91\n\n\nCode\nmissing_lastYear &lt;- missing_data %&gt;%\n  filter(Date &gt; today() - months(13)) %&gt;% # the current month won't have data\n  group_by(Area, Variable) %&gt;%\n  summarise(EU = unique(EU),\n            months_with_data = sum(!missing), .groups = 'drop') %&gt;%\n  pivot_wider(names_from = Variable, values_from = months_with_data, values_fill = 0) %&gt;% \n  relocate(c(Demand,`Net Imports`, `Total Generation`), .before = Bioenergy) %&gt;% \n  arrange(desc(EU), Area)\n\nmissing_lastYear %&gt;%  ##to get an overview for which countries and fuels there is data since June 2023 (not excluding zeros)\n  mutate_if(is.numeric, round, 3) %&gt;% \n  datatable(\n    filter = \"top\",  \n    rownames = FALSE, \n    extensions = 'Scroller', \n    options = list(autoWidth = TRUE,\n                   deferRender = TRUE,\n                   scrollY = 300,\n                   scrollX = TRUE,    # Enable horizontal scrolling\n                   scroller = TRUE, \n                   initComplete = JS(\n                     \"function(settings, json) {\",\n                     \"$('.dataTables_wrapper').css('font-size', '10px');\",  # Adjust font size here\n                     \"}\")))\n\n\n\n\n\n\n\nBetter to use demand to initially identify which countries and months to do the predictions"
  },
  {
    "objectID": "index.html#demand-adjustment-to-regional-eu",
    "href": "index.html#demand-adjustment-to-regional-eu",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Demand adjustment to Regional EU",
    "text": "Demand adjustment to Regional EU\n\nCompare against Regional EU demand\n\n\nCode\n# Aggregate the country-level Demand data for each month\ndemand_EU_Estimated &lt;- dfdown1 %&gt;%\n  filter(Variable == \"Demand\", EU == 1) %&gt;%\n  group_by(Date) %&gt;%\n  summarize(EU_Estimated = sum(Value, na.rm = TRUE), .groups = 'drop')\n\n# Extract the EU Demand data for the same months\ndemand_EU_Regional &lt;- dfdown1 %&gt;%\n  filter(Area == \"EU\", Variable == \"Demand\", Date %in% demand_EU_Estimated$Date) %&gt;%\n  select(Date, EU_Regional = Value)\n\n# Merge the country-aggregated and EU data for comparison\ncompEU &lt;- left_join(demand_EU_Estimated, demand_EU_Regional, by = \"Date\") %&gt;%\n  mutate(difference = EU_Regional - EU_Estimated)\n\n# View the comparison to see any discrepancies\n\nq3 &lt;- ggplot(compEU, aes(x = EU_Estimated, y = EU_Regional)) +\n  geom_abline() +\n  geom_smooth(method = 'lm') +\n  geom_point() +\n  theme_classic() + \n  scale_y_continuous(expand = c(0.01 ,0)) +\n  scale_x_continuous(expand = c(0.01 ,0))\n\nq4 &lt;- ggplot(compEU, aes(x = Date, y = difference)) +\n  geom_col() +\n  labs(y = \"Difference between regional and estimated EU demand\", x = NULL) +\n  scale_x_date(expand = c(0.01 ,0), date_breaks = \"1 year\", date_labels = \"%Y %b\") +\n  scale_y_continuous(expand = c(0.01 ,0)) +\n  theme_classic()\n\nq3 + q4\n\n\n\n\n\nThe estimated EU values from adding up all countries seem to be highly correlated enough but the difference seem to be higher prior to 2019.\n\n\nPredict demand missing data using ARIMA\n\n\nCode\ndemand_filtered &lt;- dfdown1 %&gt;%\n  filter(Date &gt;= \"2019-01-01\", \n         Variable == \"Demand\", \n         EU == 1)\n\n# Create a complete date sequence from min to max months used for all countries\nall_dates &lt;- seq(from = min(demand_filtered$Date), to = max(demand_filtered$Date), by = \"month\")\n\n# Generate a complete dataset with all Areas, all Dates and all variables\ncomplete_data &lt;- expand_grid(Area = unique(demand_filtered$Area), \n                             EU = 1,\n                             Date = all_dates, \n                             Variable = unique(dfdown1$Variable))\n\n# Filter to just demand data and left join with the existing demand_filtered to identify missing entries\ndemand_complete &lt;- complete_data %&gt;%\n  filter(Variable %in% 'Demand') %&gt;% \n  left_join(demand_filtered, by = c(\"EU\", \"Area\", \"Date\", \"Variable\"))  %&gt;% # Mark rows as missing where the Value is NA\n  mutate(missing = ifelse(is.na(Value), TRUE, FALSE))\n\ndemand_complete %&gt;%\n  group_by(Area) %&gt;%\n  summarize(missing_months = sum(missing), \n            total_months = n(), .groups = 'drop') %&gt;% \n  filter(missing_months != 0)\n\n\n# A tibble: 3 × 3\n  Area    missing_months total_months\n  &lt;chr&gt;            &lt;int&gt;        &lt;int&gt;\n1 Cyprus               2           67\n2 Ireland              1           67\n3 Malta                1           67\n\n\nCode\n# Function to fit ARIMA and predict missing data - needs to include the rows with the missing data to predict\npredict_missing_data &lt;- function(data) {\n  data &lt;- data %&gt;% \n    mutate(predicted = ifelse(is.na(Value), TRUE, FALSE)) # Create a new column to flag predicted values\n  \n  if(any(is.na(data$Value))) {\n    # Fit ARIMA model to non-missing data\n    fit &lt;- auto.arima(data$Value, seasonal = TRUE)\n    \n    # Predict missing values\n    missing_index &lt;- which(is.na(data$Value))\n    data$Value[missing_index] &lt;- forecast(fit, h = length(missing_index))$mean\n  }\n  \n  return(data)\n}\n\n# Apply the function to each country's Demand data\npredicted_data &lt;- demand_complete %&gt;%\n  group_by(Area) %&gt;%\n  nest() %&gt;%\n  mutate(data = map(data, predict_missing_data)) %&gt;%\n  unnest(data) %&gt;% \n  rename(pred_Value = Value)\n\nfilter(predicted_data, predicted == TRUE)\n\n\n# A tibble: 4 × 8\n# Groups:   Area [3]\n  Area       EU Date       Variable `Country code` pred_Value missing predicted\n  &lt;chr&gt;   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;lgl&gt;   &lt;lgl&gt;    \n1 Cyprus      1 2024-06-01 Demand   &lt;NA&gt;                0.425 TRUE    TRUE     \n2 Cyprus      1 2024-07-01 Demand   &lt;NA&gt;                0.403 TRUE    TRUE     \n3 Ireland     1 2024-07-01 Demand   &lt;NA&gt;                2.74  TRUE    TRUE     \n4 Malta       1 2024-07-01 Demand   &lt;NA&gt;                0.252 TRUE    TRUE     \n\n\n\n\nAdjust Predictions to Match EU Totals\n\n\nCode\n# Aggregate predicted data at the EU level\npredicted_EU_demand &lt;- predicted_data %&gt;%\n  group_by(Date) %&gt;%\n  summarize(predicted_EU = sum(pred_Value, na.rm = TRUE), .groups = 'drop')\n\n# Compare predicted EU data with EU Regional data\ncompEUpred &lt;- predicted_EU_demand %&gt;%\n  left_join(demand_EU_Regional, by = \"Date\") %&gt;%\n  mutate(adjustment_factor = EU_Regional / predicted_EU)\n\n# Apply the EU-wide adjustment to country-level predictions\npredAdjusted_data &lt;- predicted_data %&gt;%\n  left_join(select(compEUpred, Date, adjustment_factor), by = \"Date\") %&gt;%\n  mutate(PredAdjusted_Value = pred_Value * adjustment_factor) %&gt;%\n  select(-adjustment_factor)\n\nggplot(predAdjusted_data, aes(x = PredAdjusted_Value, \n                                       y = pred_Value)) +\n  geom_abline() +\n  geom_smooth(method = 'lm') +\n  geom_point(aes(size = predicted, shape = predicted)) +\n  theme_classic() + \n  scale_y_continuous(expand = c(0.01 ,0)) +\n  scale_x_continuous(expand = c(0.01 ,0)) +\n  scale_shape_manual(values = c(20,21)) +\n  labs(y = \"Demand with the values that were predicted\", \n       x = \"Demand with adjusted values given Regional EU demand\",\n       subtitle = paste(table(predAdjusted_data$predicted)[2], 'values were predicted'))\n\n\n\n\n\nCode\npaste0(\"Counts of values different between EU regional and adjusted estimated &gt; 0.00001: \",\n       predAdjusted_data %&gt;%\n  group_by(Date) %&gt;%\n  summarize(PredAdjusted_EU = sum(PredAdjusted_Value, na.rm = TRUE), .groups = 'drop') %&gt;%\n  left_join(compEUpred, by = 'Date') %&gt;%\n  tally(abs((EU_Regional-PredAdjusted_EU)) &gt; 0.00001) %&gt;% \n    pull(n))\n\n\n[1] \"Counts of values different between EU regional and adjusted estimated &gt; 0.00001: 0\"\n\n\nNo value has a difference bigger than 0.00001 between EU regional values and the adjusted and predicted added up EU estimates."
  },
  {
    "objectID": "index.html#net-imports-predictions-to-calculate-adjusted-total-generation-given-adjusted-to-eu-regional-demand",
    "href": "index.html#net-imports-predictions-to-calculate-adjusted-total-generation-given-adjusted-to-eu-regional-demand",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Net imports predictions to calculate adjusted total generation given adjusted to EU regional demand",
    "text": "Net imports predictions to calculate adjusted total generation given adjusted to EU regional demand\n\n\nCode\n## get the complete rows with the fuel values\ncomplete_data2 &lt;- left_join(complete_data, dfdown1) \n\n# Predict Net Imports using the ARIMA function\nnet_imports_data &lt;- complete_data2 %&gt;% \n  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), \n         Variable == \"Net Imports\")  %&gt;%\n  group_by(Area) %&gt;%\n  nest() %&gt;%\n  mutate(data = map(data, predict_missing_data)) %&gt;%\n  unnest(data) %&gt;% \n  rename(pred_Imports = Value)\n\n# Predict Total Generation using the defined ARIMA function to keep if needed eventually\ntotal_generation_data &lt;- complete_data2 %&gt;% \n  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), \n         Variable == \"Total Generation\")  %&gt;%\n  group_by(Area) %&gt;%\n  nest() %&gt;%\n  mutate(data = map(data, predict_missing_data)) %&gt;%\n  unnest(data) %&gt;% \n  rename(pred_Total = Value)\n\n# Get the adjusted Total generation from predicted Imports and predicted Demand\npred_missing_ImpTotal &lt;- filter(predAdjusted_data, predicted == TRUE) %&gt;%  \n  left_join(select(net_imports_data, Area, Date, pred_Imports)) %&gt;% \n  left_join(select(total_generation_data, Area, Date, pred_Total)) %&gt;% \n  rename(PredAdjusted_Demand = PredAdjusted_Value) %&gt;% \n  mutate(adjusted_Total = PredAdjusted_Demand - pred_Imports)\npred_missing_ImpTotal\n\n\n# A tibble: 4 × 12\n# Groups:   Area [3]\n  Area       EU Date       Variable `Country code` pred_Value missing predicted\n  &lt;chr&gt;   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;lgl&gt;   &lt;lgl&gt;    \n1 Cyprus      1 2024-06-01 Demand   &lt;NA&gt;                0.425 TRUE    TRUE     \n2 Cyprus      1 2024-07-01 Demand   &lt;NA&gt;                0.403 TRUE    TRUE     \n3 Ireland     1 2024-07-01 Demand   &lt;NA&gt;                2.74  TRUE    TRUE     \n4 Malta       1 2024-07-01 Demand   &lt;NA&gt;                0.252 TRUE    TRUE     \n# ℹ 4 more variables: PredAdjusted_Demand &lt;dbl&gt;, pred_Imports &lt;dbl&gt;,\n#   pred_Total &lt;dbl&gt;, adjusted_Total &lt;dbl&gt;"
  },
  {
    "objectID": "index.html#fuels-adjustment-to-eu-regional",
    "href": "index.html#fuels-adjustment-to-eu-regional",
    "title": "Optimization of Ember Electricity Generation Data with ARIMA Model and Regional EU Adjustments",
    "section": "Fuels adjustment to EU regional",
    "text": "Fuels adjustment to EU regional\nEstimate adjusted fuels by taking a adjusted total generation from the EU regional adjusted demand and the per country/fuel net imports.\n\nPrediction and adjustment for missing countries/months per fuel + country + month\n\n\nCode\n# Predict per fuel and adjust based on adjusted total\nfuel_types &lt;- filter(complete_data2, !Variable %in% \n                       c(\"Demand\",\"Net Imports\", \"Total Generation\")) %&gt;% \n  pull(Variable) %&gt;% \n  unique()\n\nmissingCountries_fuel_data &lt;- complete_data2 %&gt;% \n  filter(Area %in% unique(pull(filter(predicted_data, predicted == TRUE), Area)), \n         Variable %in% fuel_types)  \n\nfinal_fuel_predictions &lt;- list()\n# Loop through each country with missing data\nfor (country in unique(pred_missing_ImpTotal$Area)) {\n  \n  missingDates &lt;- filter(predicted_data, predicted == TRUE, Area == country) %&gt;% \n    pull(Date)\n  \n  # Filter for the specific country\n  country_data &lt;- missingCountries_fuel_data %&gt;% \n    filter(Area == country) %&gt;%\n    ## deal with the fuels that are missing in historical data, consider them zeros. If not doing this it will predict values for month for which there is data\n    mutate(Value = case_when(!Date %in% missingDates & is.na(Value) ~ 0,\n                             TRUE~Value)) \n  \n  # Initialize an empty list to store fuel predictions for this country\n  country_fuel_predictions &lt;- list()\n  ## Loop through each fuel type\n  for (fuel in fuel_types) {\n    \n    # Predict fuel contribution using the defined ARIMA function\n    fuel_data &lt;- country_data %&gt;% \n      filter(Variable == fuel)\n    \n    predicted_fuel &lt;- predict_missing_data(fuel_data) %&gt;% \n      filter(predicted == TRUE)\n    \n    # Store the fuel predictions\n    country_fuel_predictions[[fuel]] &lt;- predicted_fuel\n  }\n  \n  # Combine all the fuel predictions for this country\n  country_fuels_df &lt;- bind_rows(country_fuel_predictions)\n  \n  # Check if the sum of predicted fuels matches the adjusted Total Generation\n  sum_predicted_fuels &lt;- country_fuels_df %&gt;% \n    group_by(Area, Date) %&gt;%\n    summarize(sum_fuels = sum(Value, na.rm = TRUE)) %&gt;% \n    left_join(select(pred_missing_ImpTotal, Area, Date, adjusted_Total)) %&gt;%\n    mutate(adjustment_factor = adjusted_Total / sum_fuels)\n  \n  # Store the adjusted fuel predictions for each country\n  final_fuel_predictions[[country]] &lt;- country_fuels_df %&gt;%\n    left_join(sum_predicted_fuels) %&gt;%\n    mutate(adjusted_valueFuel = Value * adjustment_factor) %&gt;%\n    select(Area, Date, Variable, Value, adjusted_valueFuel)\n}\n\n# Combine all missing countries' fuel predictions \nmissing_fuel_predictions_df &lt;- bind_rows(final_fuel_predictions)\n\nmissingFinal &lt;- select(pred_missing_ImpTotal, -Variable, -`Country code`, -missing) %&gt;% \n  rename(`Net Imports` = pred_Imports, `Total Generation` = pred_Total,\n         Demand = pred_Value, adjusted_Demand = PredAdjusted_Demand ) %&gt;% \n  left_join(missing_fuel_predictions_df)\n\n\n\n\nAdjustment of non missing countries/months\n\n\nCode\n# Create a DataFrame for fuels without the missing data\nnonmissing_fuel &lt;- complete_data2 %&gt;%\n  filter(Variable %in% fuel_types) %&gt;%\n  select(Area, EU, Date, Variable, Value) %&gt;% \n  replace_na(list(Value = 0)) ### assume missing fuels are just 0s\n\n# Left Join Net Imports, Total Generation, and Demand per fuel/country/date and get adjusted Total for non missing\nfuel_adjustment_data &lt;- complete_data2 %&gt;%\n    filter(!Variable %in% fuel_types) %&gt;%\n    select(Area, EU, Date, Variable, Value) %&gt;% \n  pivot_wider(names_from = Variable, values_from = Value) %&gt;% \n  left_join(nonmissing_fuel) %&gt;% \n  left_join(select(predAdjusted_data, Area, Date, predicted, PredAdjusted_Value)) %&gt;% \n  rename(PredAdjusted_Demand = PredAdjusted_Value) %&gt;%\n  mutate(adjusted_Total = PredAdjusted_Demand - `Net Imports`) %&gt;%\n    filter(predicted == FALSE)\n\n# Apply Adjustment Factor to Fuels for non missing\nadjusted_fuel_data &lt;- fuel_adjustment_data  %&gt;% \n  group_by(Area, Date) %&gt;%\n  mutate(sum_fuels = sum(Value, na.rm = TRUE),\n         adjustment_factor = adjusted_Total / sum_fuels,\n         adjusted_valueFuel = Value * adjustment_factor) %&gt;%\n  select(Area, Date, Variable, adjusted_valueFuel)\n\n# clean data for both missing and non missing as well demand/total/net imports and adjusted\nfinalDataEU &lt;- left_join(fuel_adjustment_data, adjusted_fuel_data) %&gt;% \n  rename(adjusted_Demand = PredAdjusted_Demand) %&gt;% \n  bind_rows(missingFinal) %&gt;% \n  relocate(c(EU, predicted,`Net Imports`, `Total Generation`, adjusted_Total, Demand, adjusted_Demand), .before = Variable) %&gt;% \n  rename(Fuel = Variable, Fuel_value = Value, AdjustedFuel_value = adjusted_valueFuel)\n\n\n\n\n\n\n\n\n\nSelect Fuel:\n\n\n\n\n\n\nSelect Country:"
  }
]
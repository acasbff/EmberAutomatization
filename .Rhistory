list(solar_plot, wind_plot, nuclear_plot)
)
)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3, 3, 3),
filter_select("area", "Select Country:", gpdata, ~Area),
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
finalData
# Create a single shared data object for filtering
gpdata <- SharedData$new(finalData, key = ~Area)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel %in% "Bioenergy"), key = ~Area), x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy", xaxis = list(title = ''))
coal_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Coal') %>%
filter(Fuel == "Coal") %>%
layout(yaxis = list(title = "Coal"), xaxis = list(title = ''))
gas_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Gas') %>%
filter(Fuel == "Gas") %>%
layout(yaxis = list(title = "Gas"), xaxis = list(title = ''))
hydro_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Hydro') %>%
filter(Fuel == "Hydro") %>%
layout(yaxis = list(title = "Hydro"), xaxis = list(title = ''))
other_fossil_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Other Fossil') %>%
filter(Fuel == "Other Fossil") %>%
layout(yaxis = list(title = "Other Fossil"), xaxis = list(title = ''))
other_renewables_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Other Renewables') %>%
filter(Fuel == "Other Renewables") %>%
layout(yaxis = list(title = "Other Renewables"), xaxis = list(title = ''))
solar_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Solar') %>%
filter(Fuel == "Solar") %>%
layout(yaxis = list(title = "Solar"), xaxis = list(title = ''))
wind_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Wind') %>%
filter(Fuel == "Wind") %>%
layout(yaxis = list(title = "Wind"), xaxis = list(title = ''))
nuclear_plot <- plot_ly(gpdata, x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Nuclear') %>%
filter(Fuel == "Nuclear") %>%
layout(yaxis = list(title = "Nuclear"), xaxis = list(title = ''))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3, 3, 3),
filter_select("area", "Select Country:", gpdata, ~Area),
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel %in% "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar') %>%
layout(title = "Bioenergy", xaxis = list(title = ''), yaxis = list(title = ''))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3, 3, 3),
filter_select("area", "Select Country:", gpdata, ~Area),
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy",
xaxis = list(title = '', rangeslider = list(visible = T), fixedrange = FALSE),
yaxis = list(title = '', fixedrange = FALSE))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 10),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy",
xaxis = list(title = '', fixedrange = FALSE),
yaxis = list(title = '', fixedrange = FALSE))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 10),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy",
xaxis = list(title = '', fixedrange = TRUE),
yaxis = list(title = '', fixedrange = TRUE))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 10),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy",
xaxis = list(title = ''),
yaxis = list(title = ''))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 10),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Manually create each plot for the specified fuels
bioenergy_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Bioenergy"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Bioenergy') %>%
layout(title = "Bioenergy",
xaxis = list(title = ''),
yaxis = list(title = ''))
coal_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Coal"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Coal') %>%
layout(title = "Coal", xaxis = list(title = ''), yaxis = list(title = ''))
gas_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Gas"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Gas') %>%
layout(title = "Gas", xaxis = list(title = ''), yaxis = list(title = ''))
hydro_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Hydro"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Hydro') %>%
layout(title = "Hydro", xaxis = list(title = ''), yaxis = list(title = ''))
other_fossil_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Other Fossil"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Other Fossil') %>%
layout(title = "Other Fossil", xaxis = list(title = ''), yaxis = list(title = ''))
other_renewables_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Other Renewables"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Other Renewables') %>%
layout(title = "Other Renewables", xaxis = list(title = ''), yaxis = list(title = ''))
solar_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Solar"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Solar') %>%
layout(title = "Solar", xaxis = list(title = ''), yaxis = list(title = ''))
wind_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Wind"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Wind') %>%
layout(title = "Wind", xaxis = list(title = ''), yaxis = list(title = ''))
nuclear_plot <- plot_ly(SharedData$new(filter(finalData, Fuel == "Nuclear"), key = ~Area),
x = ~Date, y = ~Fuel_value, type = 'bar', name = 'Nuclear') %>%
layout(title = "Nuclear", xaxis = list(title = ''), yaxis = list(title = ''))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 10),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("area", "Select Country:", gpdata, ~Area),
list(bioenergy_plot, coal_plot, gas_plot),
list(hydro_plot, other_fossil_plot, other_renewables_plot),
list(solar_plot, wind_plot, nuclear_plot)
)
# Create a shared data object
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = ''),
# Add these options for dynamic axis adjustment
uirevision = 'area')
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) {
create_fuel_plot(filter(shared_data, Fuel == fuel), fuel)
})
# Create a shared data object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
filter(Fuel == fuel) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = ''),
uirevision = 'area')
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) {
create_fuel_plot(shared_data, fuel)
})
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("area", "Select Country:", shared_data, ~Area),
list(
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Create a shared data object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
filter(Fuel == fuel) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = ''),
uirevision = 'Area')
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) {
create_fuel_plot(shared_data, fuel)
})
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
filter(Fuel == fuel) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = ''),
uirevision = fuel)  # This ensures each plot updates independently
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) {
create_fuel_plot(shared_data, fuel)
})
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
filter(data, Fuel == fuel) %>%
plot_ly(x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = ''),
uirevision = fuel)  # This ensures each plot updates independently
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) {
create_fuel_plot(shared_data, fuel)
})
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
data %>%
plotly::highlight_key(~Area) %>%
plot_ly(x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel,
source = fuel,  # Add a source to each plot
color = I("blue"),  # Set a default color
transforms = list(
list(
type = 'filter',
target = ~Fuel,
operation = '=',
value = fuel
)
)) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE),
uirevision = 'area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, create_fuel_plot, data = shared_data)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
plots
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
add_trace(
transforms = list(
list(
type = 'filter',
target = ~Fuel,
operation = '=',
value = fuel
)
)
) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE),
uirevision = 'area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) create_fuel_plot(shared_data, fuel))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar') %>%
add_trace(
transforms = list(
list(
type = 'filter',
target = ~Fuel,
operation = '=',
value = fuel
)
)
) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE),
uirevision = 'area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) create_fuel_plot(shared_data, fuel))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar', name = fuel) %>%
add_trace(
transforms = list(
list(
type = 'filter',
target = ~Fuel,
operation = '=',
value = fuel
)
)
) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE),
uirevision = 'Area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) create_fuel_plot(shared_data, fuel))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar') %>%
add_trace(
transforms = list(
list(
type = 'filter',
target = ~Fuel,
operation = '=',
value = fuel
)
)
) %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE, autorange = TRUE),
uirevision = 'Area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) create_fuel_plot(shared_data, fuel))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar') %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE, autorange = TRUE),
uirevision = 'Area')  # This ensures all plots update when area changes
# Create a single SharedData object for the entire dataset
shared_data <- SharedData$new(finalData, key = ~Area)
# Function to create a plot for a specific fuel
create_fuel_plot <- function(data, fuel) {
plot_ly(data, x = ~Date, y = ~Fuel_value, type = 'bar') %>%
layout(title = fuel,
xaxis = list(title = ''),
yaxis = list(title = '', fixedrange = FALSE, autorange = TRUE),
uirevision = 'Area')  # This ensures all plots update when area changes
}
# Create plots for each fuel
fuels <- c("Bioenergy", "Coal", "Gas", "Hydro", "Other Fossil",
"Other Renewables", "Solar", "Wind", "Nuclear")
plots <- lapply(fuels, function(fuel) create_fuel_plot(shared_data, fuel))
# Arrange the plots in a 3 by 3 grid using bscols
bscols(
widths = c(2, 3,3,3),  # Adjust widths as needed
filter_select("Area", "Select Country:", shared_data, ~Area),
list(plots[[1]], plots[[2]], plots[[3]]),
list(plots[[4]], plots[[5]], plots[[6]]),
list(plots[[7]], plots[[8]], plots[[9]])
)
library(jsonlite)
# Prepare data
plot_data <- finalData %>%
group_by(Area, Fuel) %>%
summarise(data = list(list(
x = as.character(Date),
y = Fuel_value
))) %>%
ungroup() %>%
pivot_wider(names_from = Fuel, values_from = data)
# Convert to JSON for JavaScript
plot_data_json <- toJSON(plot_data, auto_unbox = TRUE)
// Create the bar plot
```{ojs}
